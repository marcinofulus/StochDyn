    sage: # wykresy dla przypadku z tłumieniem
    sage: var('x y z')
    sage: x0, y0, z0 = -0.5,-0.1,0
    sage: kolor = 'green'
    sage: # siła
    sage: F = x-x^3
    sage: V = -integrate(F,x)
    sage: # tarcie: parametr gamma
    sage: g = 0.5
    sage: w = 1
    sage: #punkty bifurkacji: 0.34357;  0.35506; 0.35785; 0.35846;  ostatni 0.3586
    sage: Akeys = ['$a_1$','$a_2$','$a_3$','$a_4$']
    sage: Aval  = [0.325,0.354,0.357,0.358]
    sage: A = dict(zip(Akeys,Aval))
    sage: p = A
    sage: for a in A.keys():
    ...    # układ różniczkowych równań ruchu
    ...    dx = y
    ...    dy = F - g*y + A[a]*cos(z)
    ...    dz = w
    ...    # numeryczne rozwiazanie równań ruchu
    ...    T = srange(0,100*pi,0.01)
    ...    num = desolve_odeint(vector([dx,dy,dz]), [x0,y0,z0], T, [x,y,z])
    ...    figsize = [12,3] if a == '$a_4$' else 3.5
    ...    start, stop = int(len(num[:,0])*0.8), len(num[:,0])
    ...    p[a] = list_plot(zip(num[:,0][start:stop],num[:,1][start:stop]), plotjoined=1,\
    ...    color=kolor, axes_labels=['$x(t)$','$v(t)$'], legend_label='%s=%.5f'%(a,A[a]), figsize=figsize)
    sage: #
    sage: html("""Układ równań różniczkowych
    sage: $\dot{x} = %s$
    sage: $\dot{y} = %s$
    sage: $\dot{z} = %s$
    sage: z warunkami początkowymi
    sage: $(x_0,y_0,z_0) = (%.2f,%.2f,%.2f)$
    sage: """%(dx,dy,dz,x0,y0,z0))
    sage: html.table([[p['$a_1$'],p['$a_2$'],p['$a_3$']]])
    sage: p['$a_4$'].show()
    sage: 
    sage: 
    sage: 
    sage: var('x y z')
    sage: # parametry układu równań różniczkowych
    sage: a, g = 0.3, 0.26
    sage: # częstotliwość (do obliczania cięcia Poincarego)
    sage: w0 = 1
    sage: # wartości początkowe
    sage: x0, y0, z0 = 0.1, 0.1, 0
    sage: #układ równań różniczkowych
    sage: dx = y
    sage: dy = x - x**3 - g*y + a*cos(z)
    sage: dz = w0
    sage: #krok co jaki wypełniać się ma nasza lista 
    sage: #rozwiązań ustawiamy równy okresowi
    sage: h = 2.0*pi/w0
    sage: ###
    sage: #symulacje
    sage: ###
    sage: T = 10000
    sage: listT = srange(0,T,float(h), include_endpoint=True)
    sage: sol = desolve_odeint(vector([dx, dy, dz]), [x0, y0, z0], listT, [x,y,z])
    sage: #i sam rysunek cięcia
    sage: points(zip(sol[:,0],sol[:,1]), figsize=(8,4), axes_labels=["$x(n\cdot2 \pi/\omega)$","$v(n\cdot2 \pi/\omega)$"], frame=1, axes=0, size=1)
    sage: 
    sage: 
    sage: 
    sage: 
    sage: 

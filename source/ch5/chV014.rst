Przykłady całkowania procesów stochastycznych
=============================================

Proces dyfuzji
--------------

Jest to prawdopodobnie najprostszy proces stochastyczny wykorzystujący biały szum
gaussowski jako proces losowy. Przez matematyków nazywany jest po prostu procesem
Wienera ponieważ prawa strona równania ruchu zawiera tylko i wyłącznie ów proces.
Z drugiej strony jest obok procesu Poissona najważniejszym procesem losowym
na bazie którego można zdefiniować całą rodzinę procesów losowych o ciągłych
realizacjach. Równanie to można przedstawić używając równania Ito

.. math::

   d x(t) = \sqrt{2 D} dW(t).

Realizacja jest funkcją ciągłą, ale nigdzie nieróżniczkowalną (jako że pochodna
procesu Wienera nie istnieje). Za pomocą znanego już schematu Eulera-Maruyamy (EM)
możemy sobie wygenerować pojedynczą realizację takiego procesu. Parametr :math:`D`
reguluje natężenie szumu.

.. math::
  
   x_0 = 0

   x_{i+1} = x_i + \sqrt{2 h D} N(0,1).

Wiemy, że dla
procesu Wienera :math:`W(0) = 0`, wystartujemy więc z :math:`x(0) = 0`. Weźmy
krok :math:`h=0.01` i 5000 kroków czasowych. Dla przejrzystości weźmiemy 
natężenie szumu :math:`D=1`. Jako, że wiemy jak generować zmienne z rozkładem
`N(0,1)` użyjemy sobie "symbolicznego" oznaczenia na funkcję zwracajacą
takie zmienne. Funkcję taką nazwiemy ``std_norm``. Konkretna realizacja 
takiej funkcji może odbywać np: poprzez algorytm Boxa-Mullera. Funkcja ta
będzie przy wywołaniu zwracała jedną liczbę losową z `N(0,1)`.

.. code-block:: python

   h = 0.01
   N = 5000
   x0 = 0
   D = 1

   x = [x0]
   for i in xrange(1,N):
     n01 = std_norm()
     x.append(x[i-1] + sqrt(2*h*D) * n01)

Teraz narysujmy sobie takie realizacje dla kilku różnych wartości parametru `D`.

.. figure:: images/05/dyf02.png 
  :alt: Proces dyfuzji dla kilku różnych wartości parametru D.
  :align: center

  Proces dyfuzji dla kilku różnych wartości parametru D.

Na pierwszy rzut oka trajektorie (czy realizacje, przebiegi...) wyglądają kompletnie 
inaczej. Dla małych wartości `D` krzywe są bardziej regularne niż dla tych
parametryzowanych przez większe wartości `D`, dla których to wykres jest mocno
poszarpany i nieregularny. Jeżeli jednak narysowalibyśmy je osobno, nie oznaczając
osi, identyfikacja byłaby niemożliwa - nie widzimy bowiem relacji pomiędzy 
wartościami (przyrostami).

.. figure:: images/05/dyf.png 
  :alt: Proces dyfuzji dla kilku różnych wartości parametru D.
  :align: center

  Proces dyfuzji dla kilku różnych wartości parametru D. Są to te same przebiegi co
  w poprzednim wykresie. Kolory tu uzyte odpowiadają kolorom z wykresu poprzedniego.

Jako, że rozwiązanie równania dyfuzji znane jest od dawoen dawna, możemy potestować
na ile dokładnie rozwiązujemy nasze równanie. Oczywiście jedyne co możemy określić, 
to rozkład gęstości prawdopodobieństwa. Zakładając warunki początkowe

.. math::

   P(x,0) = \delta (x)

co oznacza, że cały zespół cząstek podlegających dyfuzji wystartuje z :math:`x(0)=0`,
możemy podać odpowiedź, bazując na równaniu dyfuzji

.. math::

   \frac{\partial P(x,t)}{\partial t} = D\frac{\partial^2 P(x,t)}{\partial x^2}.

Wynikiem jest rozkład Gaussa postaci

.. math::

   P(x,t) = \frac{1}{\sqrt{4 \pi D t}} \exp \Big[ -\frac{x^2}{4 D t} \Big].

w którym wariancja rośnie liniowo z czasem a średnia jest równa zero. Zobaczmy, czy jesteśmy w
stanie zweryfikować powyższy wzór numerycznie. Postaramy się znaleźć histogram
pozycji 10000 cząstek po 100 krokach i porównamy go z powyższym wynikiem. Założymy sobie
:math:`D=0.1` i krok czasowy :math:`h=0.01`. Oznacza to, że po 100 krokach symulacji
osiągniemy rzeczywisty czas równy 1.

.. figure:: images/05/dyf_100n.png 
  :alt: Proces dyfuzji po 100 krokach symulacji.
  :align: center

  Proces dyfuzji po 100 krokach symulacji dla :math:`D=0.1`, :math:`h=0.01`, :math:`N=100`
  a co za tym idzie :math:`t=Nh`.

Zadanie 6.1.1
  Wykonaj w Sage powyższy rysunek. Metodę generowania histogramów znajdziesz w pierwszej
  części skryptu. Listę położeń, którą należy podać do histogramu wygeneruj w podobny
  sposób jak na początku tego rozdziału.

Dyfuzja ze stałym dryftem
-------------------------
Proces taki otrzymuje się bezpośrednio jako graniczny przypadek niesymetrycznego błądzenia
przypadkowego (polecam poczytać `ten podrozdział 
<http://el.us.edu.pl/ekonofizyka/index.php/PIZL:Proces_Wienera_i_proces_dyfuzji#Przypadek_niesymetryczny:_dyfuzja_z_dryfem>`_).
Równanie opisujące ten proces ma postać zbliżoną do poprzedniego, bogatsze jest jednak
o dodatkowy czynnik, zwany dryftem

.. math::

   \frac{\partial P(x,t)}{\partial t} = -V\frac{\partial P(x,t)}{\partial x} + D\frac{\partial^2 P(x,t)}{\partial x^2}.

Rozwiązaniem równania dyfuzji z dryfem, z takim samym warunkiem początkowym jak poprzednio 
(wszystkie cząstki, bądź realizacje zaczynają z tego samego położenia :math:`x(0)=0`
jest następujaca funkcja

.. math::

   P(x,t) = \frac{1}{\sqrt{4 \pi D t}} \exp \Big[ -\frac{(x - Vt)^2}{4 D t} \Big].

Jest to funkcja Gaussa opisujaca zmienne losowe normalne, a dwa pierwsze momenty wynoszą
odpowiednio :math:`\xi(t) = Vt` oraz :math:`\sigma_{\xi}^2 = 2 D t`. Łatwo zauważyć, że
zarówno średnia jak i wariancja zależne są liniowo od czasu. Ponadto wariancja jest 
identyczna jak w procesie dyfuzji bez dryftu. Dryft ów stały można z punktu widzenia fizyki
rozumieć jako stałą siłę przyłożoną do cząstki (coś na kształt cząstki umieszczonej na 
równi pochyłej) - położenie cząstki rośnie liniowo z czasem (jak w ruchu jednostajnie
prostoliniowym), ale fluktuacje rosną w czasie jak pierwiastek :math:`\sqrt{t}`.

Podobną analizę numeryczną jak poprzednio możemy przeprowadzić i tutaj. Tym razem, wykreślimy
sobie stroboskopowo histogram położeń po kilku krokach: `N = 10, 100, 200`. Po lekkiej
modyfikacji numeryczny schemat EM będzie wyglądał tak

.. code-block:: python

   h = 0.01
   N = 5000
   x0 = 0
   V = 1
   D = 1

   x = [x0]
   for i in xrange(1,N):
     n01 = std_norm()
     x.append(x[i-1] + V*h + sqrt(2*h*D) * n01)

Teraz wystarczy zobaczyć, czy histogramy położeń po czasie `t=0.1, 1, 2` będą odpowiadały
obliczonej powyżej funkcji rozkładu.

.. figure:: images/05/dryftdif001.png 
  :alt: Proces dyfuzji z dryftem po 10, 100 i 200 krokach symulacji.
  :align: center

  Proces dyfuzji ze stałym dryftem po 10, 100 i 200 krokach symulacji dla :math:`D=0.1`, 
  :math:`h=0.01`, a co za tym idzie :math:`t=0.1, 1, 2`.

Możemy policzyć sobie teraz średnie, odchylenie standardowe oraz błędy względny i bezwzględny 
przybliżeń dokładnych rozwiązań procesu dyfuzji z dryftem.

+-----+-------+------+---------+-----------+---------------+
|czas |       |teoria|symulacje|:math:`E_b`|:math:`E_w` [%]|
+=====+=======+======+=========+===========+===============+
|     |średnia|0.10  |0.09972  |0.0002766  |0.2766         |
|t=0.1+-------+------+---------+-----------+---------------+
|     |std    |0.1414|0.1413   |0.00007544 |0.05335        |
+-----+-------+------+---------+-----------+---------------+
|t=1  |średnia|1.0   |1.005    |0.005345   |0.5345         |
|     +-------+------+---------+-----------+---------------+
|     |std    |0.4472|0.444    |0.003026   |0.6766         |
+-----+-------+------+---------+-----------+---------------+
|t=2  |średnia|2.0   |2.001    |0.001460   |0.07302        |
|     +-------+------+---------+-----------+---------------+
|     |std    |0.6324|0.6362   |0.003708   |0.5863         |
+-----+-------+------+---------+-----------+---------------+

Jak widzimy błędy bezwzględne dochodzą do około pół punktu procentowego różnicy dla 10000 
realizacji. Zwiekszenie próby spowoduje jeszcze lepsze dopasowanie, zmniejszenie spowoduje
większe odchylenia od wartości rzeczywistych.

Zadanie 6.1.2
  Oblicz błędy przybliżenia rozwiazania problemu dyfuzji ze stałym dryftem dla 10, 100, 500 i
  1000 różnych realizacji. Zestawienia podaj w tabeli.

.. Proces Ornsteina-Uhlenbecka
.. ---------------------------

.. Równanie Blacka-Scholesa
.. ------------------------




Szum dychotomiczny
------------------

Jest to prawdopodobnie najprostszy z możliwych rodzaj skorelowanego szumu,
który może wzbudzić transport w układach jakie analizujemy. Proces :math:`\xi(t)`,
czyli stacjonarny, dychotomiczny, stochastyczny proces Markowa - szum
telegraficzny, przyjmuje losowo dwie wartości:

.. math::
   :label: eqn101

   \xi(t)=\{-a, b\}, \qquad a,b>0,

   P(-a \to b)=\mu_a=\frac{1}{\tau_a},

   P(b \to -a)=\mu_b=\frac{1}{\tau_b},

gdzie :math:`P(x_1 \to x_2)` jest prawdopodobieństwem skoku z wartości :math:`x_1` do
:math:`x_2` na jednostkę czasu, a :math:`\tau_a` i :math:`\tau_b` wyrażają średni czas
przebywania w stanie odpowiednio :math:`-a` i :math:`b`. Przy założeniu, że rozkład
początkowy szumu :math:`\xi(t)` jest stacjonarny, czyli:

.. math::
   :label: eqn102

   P(\xi(0)=b)=\frac{\mu_a}{\mu_a+\mu_b},
   
   P(\xi(0)=-a)=\frac{\mu_b}{\mu_a+\mu_b},

średnia wartość wynosi

.. math::
   :label: eqn103
   
   \langle \xi(t) \rangle =\frac{b\mu_a-a\mu_b}{\mu_a+\mu_b}.

Jednak aby średnia siła losowa była zerowa, musimy założyc :math:`b\mu_a=a\mu_b`, co
spełnia nam automatycznie zakładany warunek. Funkcja korelacyjna wynosi
wówczas

.. math::
   :label: eqn104
  
   \langle \xi(t) \xi(s) \rangle = \frac{Q}{\tau}e^{-\mid t-s \mid / \tau},

gdzie :math:`Q=\tau ab` jest natężeniem procesu oraz :math:`\tau =1/(\mu_a+\mu_b)` jest
czasem korelacji. Z powyższego wynika, że szum dychotomiczny jest
charakteryzowany trzema parametrami: :math:`Q`, :math:`\tau` i :math:`\theta=b-a`. Ostatni mówi
o symetrii procesu - gdy :math:`\theta` znika proces jest symetryczny, w przeciwnym
wypadku jest asymetryczny.

Realizacja szumu dychotomicznego
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Proces :math:`\xi(t)` oznacza, że cząstka losowo przeskakuje ze stanu :math:`-a` do :math:`b` i z powrotem, średnio spędzajęc odpowiednio :math:`1/\mu_a` czasu w stanie :math:`-a` i :math:`1/\mu_b` w stanie :math:`b`. Czas pobytu w obu stanach jest zmienną losową o rozkładzie eksponencjalnym i średniej :math:`1/\mu_k`, dla :math:`k=a` lub :math:`b`, zatem algorytm generujący trajektorie :math:`\xi(t)` polega na losowaniu liczb z rozkładem eksponencjalnym. Postępować należy więc w sposób nastepujący:

  * generujemy realizację procesu na jednostkę czasu

  * całkujemy otrzymane równanie rózniczkowe.


Gdy startujemy z wartości przykładowo :math:`-a`, bierzemy skok czasowy :math:`\Delta t={1 \over \mu_a} \hat{z}` (czas określający jak długo cząstka przebywać bądzie w stanie :math:`-a`), gdzie :math:`\hat{z}` to generator liczb losowych z rozkładem

.. MATH::
  :label: eqn105

  P(\Delta t)=\exp(-\Delta t), \Delta t>0.

Aby zapamietaæć całą realizację procesu :math:`\xi(t)` musimy tablicować liczby :math:`t_i` - skoki pomiedzy wartościami :math:`\{ a, b\}`, oraz wartość startową.

.. only:: latex

  .. code-block:: python

    from scipy import stats
    from numpy import cumsum

    # definicja szumu dychotomicznego
    a = -1
    b = 3
    stan = [a,b]
    mu_a = 1
    mu_b = mu_a * abs(b) / abs(a)
    mu = [mu_a,mu_b]

    # realizacja
    N = 20
    czasy = [-log(random()/mu[i%2]) for i in range(N)]
    punkty = cumsum(czasy)
    stany = [stan[i%2] for i in range(N)]

    # wizualizacja
    p = plot_step_function(zip(punkty,stany))


  .. figure:: images/sage_chV03_02.*
    :align: center
    :width: 80%
    :alt: figch

    Realizacje szumu dychotomicznego.


.. only:: html

  .. sagecellserver::
    :is_verbatim: True

    from scipy import stats
    from numpy import cumsum
    # definicja szumu dychotomicznego
    a = -1
    b = 3
    stan = [a,b]
    mu_a = 1
    mu_b = mu_a * abs(b) / abs(a)
    mu = [mu_a,mu_b]
    # realizacja
    N = 20
    czasy = [-log(random()/mu[i%2]) for i in range(N)]
    punkty = cumsum(czasy)
    stany = [stan[i%2] for i in range(N)]
    # wizualizacja
    p = plot_step_function(zip(punkty,stany))
    p.axes_labels([r'$t$',r'$\xi(t)$'])
    p.show(figsize=[8,3],frame=1,axes=1)

  .. end of input


Szum kangura
------------

Jako, że kangury skaczą zwykle na skończone odległości, to realizacja procesu ograniczonego wydaje się bardziej sensowna. Niemniej jednak dla komputera sytuacja jest bez różnicy. Metoda symulacji procesu kangura polega na generowaniu stanów do których proces skacze (miejsca w które skacze kangur) oraz przedziałów czasowych w których to proces będzie przebywał (czasy odpoczynku kangura pomiędzy skokami). Jeżeli chodzi o proces kangura, to owe przedziały czasowe zależne są od stanu w jakim znajduje się proces (coś jakby powiedzieć, że im dalej kangur skoczy tym dłużej musi odpoczać...). Algorytm polega na powtarzaniu

1. Obliczamy wartość zmiennej losowej korzystając z jednego z rozkładów

  (i) gdy proces :math:`\xi(t)` jest nieograniczony, określony na przedziale :math:`(-\infty, \infty)` i stacjonarna gęstość prawdopodobieństwa jest gaussowska:

    .. MATH::
      :label: eqn106

      p(z) = Q(z) = \frac{1}{\sqrt{2\pi} \sigma} \mbox{exp}(-z^2/2\sigma^2), \quad \xi(t) \in (-\infty, \infty)


  (ii) gdy proces :math:`\xi(t)` jest ograniczony na przedziale :math:`[-l, l]` i ma jednostajną gęstość prawdopodobieństwa

    .. MATH::
      :label: eqn107

      p(z) = Q(z) = \frac{1}{2l}\theta(z+l)\theta(l-z),\quad \xi(t) \in [-l, l],

    gdzie :math:`\theta(x)` jest funkcją schodkową Heaviside'a. 

2. Teraz obliczamy częstość :math:`\nu(\xi)`.

3. Kiedy już znamy częstość, to obliczamy przedział czasowy w którym będzie przebywał proces kangura w stanie :math:`\xi` zgodnie z

  .. MATH::
    :label: eqn108

    P(T) = \nu(\xi) e^{-T\nu(\xi)}


Oczywiście rozpatrując szum Kubo-Andersona, gdzie :math:`\nu(\xi) = \nu_0` jest stałe, wyrażenia mocno się upraszczają. 


.. only:: latex

  .. code-block:: python

    #szum kangura
    #szum Kubo - Andersona
    #stała częstość \vu
    #proces ograniczony

    from scipy import stats

    l = 2
    N = 20
    p=[]
    for iii in range(3):
        ksi = [2*l*random() - l for i in range(N)]
        #list_plot(ksi)
        
        nu_0 = 2.2
        czasy = stats.expon.rvs(scale=1/nu_0,size=N)
        
        c=random(),random(),random()
        p.append(plot_step_function(zip(czasy,ksi),color=c))

  .. figure:: images/sage_chV03_03.*
    :align: center
    :width: 80%
    :alt: figch

    Realizacje ograniczonego szumu kangura.


.. only:: html

  .. sagecellserver::
    :is_verbatim: True

    #szum kangura
    #szum Kubo - Andersona
    #stała częstość \vu
    #proces ograniczony

    from scipy import stats
    l = 2
    N = 20
    p=[]
    for iii in range(3):
        ksi = [2*l*random() - l for i in range(N)]
        #list_plot(ksi)
        nu_0 = 2.2
        czasy = stats.expon.rvs(scale=1/nu_0,size=N)
        c=random(),random(),random()
        p.append(plot_step_function(zip(czasy,ksi),color=c))
    p=sum(p)
    p.axes_labels([r'$t$',r'$\xi$'])
    p.show(figsize=[8,3])

  .. end of input


Proces Poissona
---------------

Pojedynczą realizację procesu Poissona można uzyskać poprzez wygenerowanie 
:math:`N` niezależnych punktów losowo rozłożonych na osi czasu na odcinku 
:math:`[0,T]`. Ilość punktów generujemy z rozkładu Poissona a ich położenie 
na osi czasu zgodnie z rozkładem jednorodnym :math:`U(0,N)`. Najprościej 
posłużyć się pakietem ``scipy``, aby wygenerować ilość punktów korzystając 
z rozkładu Poissona. Tak właśnie zrobiliśmy w rozdziale poświęconym
dynamice stochastycznej. Tutaj skorzystamy z metody inwersyjnej. 
Kolejne zdarzenia na osi czasu są z definicji procesu Poissona od siebie 
niezależne. Rozkład czasów miedzy dwoma kolejnymi punktami jest eksponencjalny

.. math::
  :label: eqn201

  p(t) = \mu e^{-\mu t}

Sekwencja liczb wygenerowanych z takim rozkładem zdefiniuje nam proces 
Poissona. 

Jak już pisaliśmy wcześniej, dystrybuanta rozkładu :eq:`eqn201` wynosi

.. math::
  :label: eqn202

  F(x) = 1 - e^{-\mu x}

A jej odwrotność :math:`-\ln(1 - u)/\mu`, gdzie :math:`u` to liczba 
losowa o rozkładzie :math:`U(0,1)`. Wygenerujemy ją posługując się
podstawową funkcję ``random()``.


.. only:: latex

  .. code-block:: python

    from numpy import cumsum
    F(u, a) = -log(1-u)/a
    N = 20
    skoki = range(N)
    kolor = ["red", "green", "blue"]
    mu = 0.5
    p = []
    for ii in range(3):
      l = [F(random(), par) for i in skoki]
      l = cumsum(l)
      p.append(plot_step_function(zip(l,skoki),color=kolor[ii]))


  .. figure:: images/sage_chV04_20.*
    :align: center
    :width: 80%
    :alt: figchV0420

    Realizacje procesu Poissona.

.. only:: html

  .. sagecellserver::
    :is_verbatim: True

    from numpy import cumsum
    F(u, a) = -log(1-u)/a
    N = 20
    skoki = range(N)
    kolor = ["red", "green", "blue"]
    mu = 0.5
    p = []
    for ii in range(3):
      l = [F(random(), par) for i in skoki]
      l = cumsum(l)
      p.append(plot_step_function(zip(l,skoki),color=kolor[ii]))
    sum(p).show(figsize=[8,3],axes_labels=[r'$t$',r'$N(t)$'])

  .. end of input


:math:`\alpha`-stabilny proces Levy'ego
---------------------------------------

Również w przypadku procesów wykorzystujących statystykę Levy'ego posłużymy
się metodą inwersyjną.
Funkcja charakterystyczna dla :math:`\alpha`-stabilnego procesu Levy'ego
jest postaci

.. MATH::
 :label: eqn302

 \phi(k)=\left\{\begin{array}{ll}\exp\left[ -\sigma^\alpha|k|^\alpha\left (1-i\beta\mbox{sgn} k\tan\frac{\pi\alpha}{2} \right) +i\mu k \right], & \mbox{for}\;\;\alpha\neq 1, \\\exp\left[ -\sigma|k|\left (1+i\beta\frac{2}{\pi}\mbox{sgn} k \ln|k| \right) + i\mu k \right], & \mbox{for}\;\;\alpha=1. \\\end{array}\right.

gdzie :math:`\alpha\in(0, 2]`. Przypadek :math:`\beta=0` oznacza, że proces jest symetryczny.

Przepis, na wygenerowanie zmiennej losowej o rozkładzie :math:`\alpha`-stabilnym
jest następujący. Jeżeli :math:`\alpha \ne 1`, obliczamy

.. math::
  :label: eqn302

  \varsigma = D_{\alpha,\beta,\sigma} \frac{\sin(\alpha(V+C_{\alpha,\beta})) }{ (\cos V)^{\frac{1}{\alpha}}}\left[\frac{\cos(V-\alpha(V+C_{\alpha,\beta}))}{W}\right]^{\frac{1-\alpha}{\alpha}},

gdzie zmienne :math:`C` i :math:`D` są dane wzorami

.. math::
  :label: eqn303

  C_{\alpha,\beta}=\frac{\arctan\left(\beta\tan \frac{\pi\alpha}{2} \right)}{\alpha},
  
oraz

.. math::
  :label: eqn304

  D_{\alpha,\beta,\sigma}=\sigma\left[ \cos\left(\arctan\left(\beta\tan \frac{\pi\alpha}{2}\right) \right) \right]^{-\frac{1}{\alpha}}.

Dla :math:`\alpha = 1`, wyrażenie jest nieco prostsze i przyjmuje postać

.. math::
  :label: eqn305

  \varsigma = \frac{2\sigma}{\pi} \left[ (\frac{\pi}{2}+\beta V)\tan V -\beta\ln \left (\frac{\frac{\pi}{2}W\cos V}{\frac{\pi}{2}+\beta V} \right) \right] + \mu.

W obu powyższych wzorach :math:`W` oraz :math:`V` to niezależne zmienne losowe; :math:`V` posiada
rozkład jednorodny na przedziale :math:`(-\frac{\pi}{2},\frac{\pi}{2})`
a :math:`W` jest generowana z rozkładem wykładniczym o jednostkowej średniej.

Napiszemy swoją własną funkcję do wygenerowania realizacji procesu Levy'ego. 
Wykorzystamy podobną definicję jak w przypadku funkcji z pakietu ``stats.scipy``.

  ``my_levy_stable(alpha, beta, loc=0, scale=1)``

gdzie 

* ``alpha``, ``beta`` - to parametry rozkładu Levy'ego

* ``loc=0``, ``scale=1`` - to odpowiednio średnia i odchylenie standardowe (wraz z domyślnymi wartościami)

Samą funkcję oraz kilka realizacji wygenerowanych z jej pomocą znajdziecie
poniżej.

.. only:: latex

  .. code-block:: python

    def my_levy_stable(alpha, beta, loc=0, scale=1):
      mu, sigma = loc, scale
      V = pi*random() - pi/2
      W = -log(random())
      if alpha == 1:
        dzeta = (pi/2 + beta*V)*tan(V)
        dzeta -= beta*log((pi*W*cos(V)/2)/(pi/2+beta*V))
        dzeta *= 2*sigma/pi
        dzeta += mu
      else:
        C = atan(beta*tan(pi*alpha/2))/alpha
        D = sigma*(cos(atan(beta*tan(pi*alpha/2))))^(-1/alpha)    
        dzeta = D*sin(alpha*(V+C))*(cos(V-alpha*(V+C))/W)^(1/alpha-1)
        dzeta /= cos(V)^(1/alpha)
      return dzeta 

  .. figure:: images/sage_chV04_31a.*
    :align: center
    :width: 80%
    :alt: figchV0431a

    Relizacje procesów Levy'ego o parametrach podanych w legendach.


.. only:: html

  .. sagecellserver::
        :is_verbatim: True

        def my_levy_stable(alpha, beta, loc=0, scale=1):
            mu, sigma = loc, scale
            V = pi*random() - pi/2
            W = -log(1-random())
            if alpha == 1:
                dzeta = mu + 2*sigma*((pi/2 + beta*V)*tan(V)-beta*log((pi*W*cos(V)/2)/(pi/2+beta*V)))/pi
            else:
                C = atan(beta*tan(pi*alpha/2))/alpha
                D = sigma*(cos(atan(beta*tan(pi*alpha/2))))^(-1/alpha)    
                dzeta = D*sin(alpha*(V+C))*(cos(V-alpha*(V+C))/W)^(1/alpha-1)/cos(V)^(1/alpha)
            return dzeta 

        h = 0.01
        N = 5000
        x0 = 0
        alpha = [0.1,1/2,1,2]
        beta = [1,1,1,0]
        mu = [0,0,0,0]
        sigma = [1,0.1,0.1,1/sqrt(2)]
        k = ['red','green','blue','black']
        p = []
        for j in range(len(alpha)):
            x = [x0]
            c = k[j]
            for i in xrange(1,N):
                lab = float(my_levy_stable(alpha[j], beta[j], loc=mu[j], scale=sigma[j]).n())
                x.append(x[i-1] + h**(1/alpha[j]) * lab)
            p.append(list_plot(x, plotjoined=True, axes_labels=[r'$t$',r'$x(t)$'], 
                      figsize=[8,3], frame=1, axes=0, color=c,
                      legend_label=r"$\alpha=%.2f,\beta=%.2f,\mu=%.2f,\sigma=%.2f$"%(alpha[j],beta[j],mu[j],sigma[j])))
        graphics_array([p[:2],p[2:]]).show()

  .. end of input

Aby korzystając z powyższej metody otrzymać zmienne z rozkładami

* normalnym :math:`N(\mu, 2 \sigma^2)` należy zdefiniować 
  :math:`\alpha=2,\beta=0`,

* normalnym :math:`N(0,1)` należy podać
  :math:`\alpha=2,\beta=0,\sigma=1/\sqrt{2},\mu=0`,

* Cauchy-ego należy podać
  :math:`\alpha=1,\beta=0`,

* Levyego-Smirnoffa należy podać
  :math:`\alpha=1/2,\beta=1`.



